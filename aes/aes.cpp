#include <cstring>
#include <cmath>
#include "aes.h"

const unsigned char AES::sbox[AES_DATA][AES_DATA] = 
{{0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76},
 {0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0},
 {0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15},
 {0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75},
 {0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84},
 {0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf},
 {0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8},
 {0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2},
 {0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73},
 {0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb},
 {0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79},
 {0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08},
 {0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a},
 {0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e},
 {0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf},
 {0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16}};

const unsigned char AES::sbox2[16][16] =
{{0xC6, 0xF8, 0xEE, 0xF6, 0xFF, 0xD6, 0xDE, 0x91, 0x60, 0x02, 0xCE, 0x56, 0xE7, 0xB5, 0x4D, 0xEC},
{0x8F, 0x1F, 0x89, 0xFA, 0xEF, 0xB2, 0x8E, 0xFB, 0x41, 0xB3, 0x5F, 0x45, 0x23, 0x53, 0xE4, 0x9B},
{0x75, 0xE1, 0x3D, 0x4C, 0x6C, 0x7E, 0xF5, 0x83, 0x68, 0x51, 0xD1, 0xF9, 0xE2, 0xAB, 0x62, 0x2A},
{0x08, 0x95, 0x46, 0x9D, 0x30, 0x37, 0x0A, 0x2F, 0x0E, 0x24, 0x1B, 0xDF, 0xCD, 0x4E, 0x7F, 0xEA},
{0x12, 0x1D, 0x58, 0x34, 0x36, 0xDC, 0xB4, 0x5B, 0xA4, 0x76, 0xB7, 0x7D, 0x52, 0xDD, 0x5E, 0x13},
{0xA6, 0xB9, 0x00, 0xC1, 0x40, 0xE3, 0x79, 0xB6, 0xD4, 0x8D, 0x67, 0x72, 0x94, 0x98, 0xB0, 0x85},
{0xBB, 0xC5, 0x4F, 0xED, 0x86, 0x9A, 0x66, 0x11, 0x8A, 0xE9, 0x04, 0xFE, 0xA0, 0x78, 0x25, 0x4B},
{0xA2, 0x5D, 0x80, 0x05, 0x3F, 0x21, 0x70, 0xF1, 0x63, 0x77, 0xAF, 0x42, 0x20, 0xE5, 0xFD, 0xBF},
{0x81, 0x18, 0x26, 0xC3, 0xBE, 0x35, 0x88, 0x2E, 0x93, 0x55, 0xFC, 0x7A, 0xC8, 0xBA, 0x32, 0xE6},
{0xC0, 0x19, 0x9E, 0xA3, 0x44, 0x54, 0x3B, 0x0B, 0x8C, 0xC7, 0x6B, 0x28, 0xA7, 0xBC, 0x16, 0xAD},
{0xDB, 0x64, 0x74, 0x14, 0x92, 0x0C, 0x48, 0xB8, 0x9F, 0xBD, 0x43, 0xC4, 0x39, 0x31, 0xD3, 0xF2},
{0xD5, 0x8B, 0x6E, 0xDA, 0x01, 0xB1, 0x9C, 0x49, 0xD8, 0xAC, 0xF3, 0xCF, 0xCA, 0xF4, 0x47, 0x10},
{0x6F, 0xF0, 0x4A, 0x5C, 0x38, 0x57, 0x73, 0x97, 0xCB, 0xA1, 0xE8, 0x3E, 0x96, 0x61, 0x0D, 0x0F},
{0xE0, 0x7C, 0x71, 0xCC, 0x90, 0x06, 0xF7, 0x1C, 0xC2, 0x6A, 0xAE, 0x69, 0x17, 0x99, 0x3A, 0x27},
{0xD9, 0xEB, 0x2B, 0x22, 0xD2, 0xA9, 0x07, 0x33, 0x2D, 0x3C, 0x15, 0xC9, 0x87, 0xAA, 0x50, 0xA5},
{0x03, 0x59, 0x09, 0x1A, 0x65, 0xD7, 0x84, 0xD0, 0x82, 0x29, 0x5A, 0x1E, 0x7B, 0xA8, 0x6D, 0x2C}};

const unsigned char AES::sbox3[16][16] =
{{0xA5, 0x84, 0x99, 0x8D, 0x0D, 0xBD, 0xB1, 0x54, 0x50, 0x03, 0xA9, 0x7D, 0x19, 0x62, 0xE6, 0x9A},
{0x45, 0x9D, 0x40, 0x87, 0x15, 0xEB, 0xC9, 0x0B, 0xEC, 0x67, 0xFD, 0xEA, 0xBF, 0xF7, 0x96, 0x5B},
{0xC2, 0x1C, 0xAE, 0x6A, 0x5A, 0x41, 0x02, 0x4F, 0x5C, 0xF4, 0x34, 0x08, 0x93, 0x73, 0x53, 0x3F},
{0x0C, 0x52, 0x65, 0x5E, 0x28, 0xA1, 0x0F, 0xB5, 0x09, 0x36, 0x9B, 0x3D, 0x26, 0x69, 0xCD, 0x9F},
{0x1B, 0x9E, 0x74, 0x2E, 0x2D, 0xB2, 0xEE, 0xFB, 0xF6, 0x4D, 0x61, 0xCE, 0x7B, 0x3E, 0x71, 0x97},
{0xF5, 0x68, 0x00, 0x2C, 0x60, 0x1F, 0xC8, 0xED, 0xBE, 0x46, 0xD9, 0x4B, 0xDE, 0xD4, 0xE8, 0x4A},
{0x6B, 0x2A, 0xE5, 0x16, 0xC5, 0xD7, 0x55, 0x94, 0xCF, 0x10, 0x06, 0x81, 0xF0, 0x44, 0xBA, 0xE3},
{0xF3, 0xFE, 0xC0, 0x8A, 0xAD, 0xBC, 0x48, 0x04, 0xDF, 0xC1, 0x75, 0x63, 0x30, 0x1A, 0x0E, 0x6D},
{0x4C, 0x14, 0x35, 0x2F, 0xE1, 0xA2, 0xCC, 0x39, 0x57, 0xF2, 0x82, 0x47, 0xAC, 0xE7, 0x2B, 0x95},
{0xA0, 0x98, 0xD1, 0x7F, 0x66, 0x7E, 0xAB, 0x83, 0xCA, 0x29, 0xD3, 0x3C, 0x79, 0xE2, 0x1D, 0x76},
{0x3B, 0x56, 0x4E, 0x1E, 0xDB, 0x0A, 0x6C, 0xE4, 0x5D, 0x6E, 0xEF, 0xA6, 0xA8, 0xA4, 0x37, 0x8B},
{0x32, 0x43, 0x59, 0xB7, 0x8C, 0x64, 0xD2, 0xE0, 0xB4, 0xFA, 0x07, 0x25, 0xAF, 0x8E, 0xE9, 0x18},
{0xD5, 0x88, 0x6F, 0x72, 0x24, 0xF1, 0xC7, 0x51, 0x23, 0x7C, 0x9C, 0x21, 0xDD, 0xDC, 0x86, 0x85},
{0x90, 0x42, 0xC4, 0xAA, 0xD8, 0x05, 0x01, 0x12, 0xA3, 0x5F, 0xF9, 0xD0, 0x91, 0x58, 0x27, 0xB9},
{0x38, 0x13, 0xB3, 0x33, 0xBB, 0x70, 0x89, 0xA7, 0xB6, 0x22, 0x92, 0x20, 0x49, 0xFF, 0x78, 0x7A},
{0x8F, 0xF8, 0x80, 0x17, 0xDA, 0x31, 0xC6, 0xB8, 0xC3, 0xB0, 0x77, 0x11, 0xCB, 0xFC, 0xD6, 0x3A}};

const int AES::inversesbox[AES_DATA][AES_DATA] = 
{{0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb},
{0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb},
{0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e},
{0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25},
{0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92},
{0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84},
{0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06},
{0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b},
{0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73},
{0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e},
{0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b},
{0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4},
{0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f},
{0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef},
{0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61},
{0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d}};

const int AES::rcon[15] = 
{0x8d, 0x01, 0x02, 0x04, 0x08,
 0x10, 0x20, 0x40, 0x80, 0x1b, 
 0x36, 0x6c, 0xd8, 0xab, 0x4d};

const int AES::shift[AES_DATA] = 
{0, 5, 10, 15, 4, 9, 14, 3, 8, 13, 2, 7, 12, 1, 6, 11};

const int AES::inverseshift[AES_DATA] = 
{0, 13, 10, 7, 4, 1, 14, 11, 8, 5, 2, 15, 12, 9, 6, 3};

AESData *AES::encrypt(const AESData *data, const AESKey *key)
{
  unsigned char result[MAX_AES_DATA];
  unsigned char resultTemp[MAX_AES_DATA];
  unsigned char finalResult[MAX_AES_DATA];
  unsigned char keyTemp[MAX_AES_KEY];
  int round = (key->getSize() / AES_BIT_DATA) / 4 + 6;
  int expandedKeySize = (round + 1) * AES_DATA;
  unsigned char expandedKey[MAX_AES_KEY];
  int dataLength = data->length;
  int dataLeft = dataLength;
  int startIndex = 0;
  unsigned char temp;
  int row[4], column[4];
  memset(keyTemp, '\0', MAX_AES_KEY);
  key->get16BytesKey(keyTemp);
  memset(expandedKey, '\0', MAX_AES_KEY);
  expandKey(keyTemp, expandedKey, expandedKeySize, round);
  memset(finalResult, '\0', MAX_AES_DATA);
  do
  {
    startIndex = dataLength - dataLeft;
    dataLeft -= 16;
    memset(result, '\0', MAX_AES_DATA);
    memcpy(result, &(data->data[startIndex]), AES_DATA * sizeof(char));
    for (int i = 0; i <= round; i++)
    {
      if (i > 0)
      {
        memset(resultTemp, '\0', MAX_AES_DATA);
        if (i < round)
        {
          for (int j = 0; j < 4; j++)
          {
            for (int k = 0; k < 4; k++)
            {
              temp = 0;
              temp = result[shift[4 * j + k]];
              column[k] = temp & 15;
              temp >>= 4;
              row[k] = temp & 15;
            }
            resultTemp[4 * j] = sbox2[row[0]][column[0]] ^ sbox3[row[1]][column[1]] ^ sbox[row[2]][column[2]] ^ sbox[row[3]][column[3]] ^ expandedKey[i * AES_DATA + 4 * j];
            resultTemp[4 * j + 1] = sbox[row[0]][column[0]]  ^ sbox2[row[1]][column[1]] ^ sbox3[row[2]][column[2]] ^ sbox[row[3]][column[3]] ^ expandedKey[i * AES_DATA + 4 * j + 1];
            resultTemp[4 * j + 2] = sbox[row[0]][column[0]]  ^ sbox[row[1]][column[1]] ^ sbox2[row[2]][column[2]] ^ sbox3[row[3]][column[3]] ^ expandedKey[i * AES_DATA + 4 * j + 2];
            resultTemp[4 * j + 3] = sbox3[row[0]][column[0]]  ^ sbox[row[1]][column[1]] ^ sbox[row[2]][column[2]] ^ sbox2[row[3]][column[3]] ^ expandedKey[i * AES_DATA + 4 * j + 3];
          }
        }
        else
        {
          for (int j = 0; j < AES_DATA; j++)
          {
            temp = result[shift[j]];
            int column = temp & 15;
            temp >>= 4;
            int row = temp & 15;
            resultTemp[j] = sbox[row][column] ^ expandedKey[i * AES_DATA + j];
          }
        }
        memcpy(result, resultTemp, MAX_AES_DATA);
      }
      else
      {
        for (int j = 0; j < AES_DATA; j++)
          result[j] ^= expandedKey[i * AES_DATA + j];
      }
    }
    memcpy(finalResult + startIndex, result, 16);
  }
  while (dataLeft > 0);
  return new AESData(finalResult, dataLength);
}

AESData *AES::decrypt(const AESData *data, const AESKey *key)
{
  unsigned char result[MAX_AES_DATA];
  unsigned char resultTemp[MAX_AES_DATA];
  unsigned char finalResult[MAX_AES_DATA];
  unsigned char keyTemp[MAX_AES_KEY];
  int round = (key->getSize() / AES_BIT_DATA) / 4 + 6;
  int expandedKeySize = (round + 1) * AES_DATA;
  unsigned char expandedKey[MAX_AES_KEY];
  int dataLength = data->length;
  int dataLeft = dataLength;
  int startIndex = 0;
  int temp;
  memset(keyTemp, '\0', MAX_AES_KEY);
  key->get16BytesKey(keyTemp);
  unsigned char s[AES_DATA], se[AES_DATA], sb[AES_DATA], sd[AES_DATA], s9[AES_DATA];
  memset(expandedKey, '\0', MAX_AES_KEY);
  expandKey(keyTemp, expandedKey, expandedKeySize, round);
  memset(finalResult, '\0', MAX_AES_DATA);
  do
  {
    startIndex = dataLength - dataLeft;
    dataLeft -= 16;
    memset(result, '\0', MAX_AES_DATA);
    memcpy(result, &(data->data[startIndex]), AES_DATA * sizeof(char));
    int r = 0, x = 0, y = 0, t = 0;
    for (int i = round; i >= 0; i--)
    {
      if (i == round)
      {
        for (int j = 0; j < AES_DATA; j++)
          result[j] ^= expandedKey[i * AES_DATA + j];
      }
      else 
      {
        memset(resultTemp, '\0', MAX_AES_DATA);
        if (i == 0)
        {
          for (int j = 0; j < AES_DATA; j++)
          {
            temp = result[inverseshift[j]];
            int column = temp & 15;
            temp >>= 4;
            int row = temp & 15;
            resultTemp[j] = inversesbox[row][column] ^ expandedKey[i * AES_DATA + j];
          }
          memcpy(result, resultTemp, MAX_AES_DATA);
        }
        else
        {
          for (int j = 0; j < AES_DATA; j++)
          {
            temp = result[inverseshift[j]];
            int column = temp & 15;
            temp >>= 4;
            int row = temp & 15;
            resultTemp[j] = inversesbox[row][column] ^ expandedKey[i * AES_DATA + j];
          }
          memcpy(result, resultTemp, MAX_AES_DATA);
          for (int j = 0; j < AES_DATA; j++)
          {
            x = result[j];
            y = 0x0e;
            r = 0;
            while (x != 0) 
            {
              if ((x & 1) != 0)
                 r = r ^ y;
              t = y & 0x80;
              y = y << 1;
              if (t != 0)
                 y = y ^ 0x1b;
              x = x >> 1; 
            }
            r &= 255;
            se[j] = r;

            x = result[j];
            y = 0x0b;
            r = 0;
            while (x != 0) 
            {
              if ((x & 1) != 0)
                 r = r ^ y;
              t = y & 0x80;
              y = y << 1;
              if (t != 0)
                 y = y ^ 0x1b;
              x = x >> 1; 
            }
            r &= 255;
            sb[j] = r;
            
            x = result[j];
            y = 0x0d;
            r = 0;
            while (x != 0) 
            {
              if ((x & 1) != 0)
                 r = r ^ y;
              t = y & 0x80;
              y = y << 1;
              if (t != 0)
                 y = y ^ 0x1b;
              x = x >> 1; 
            }
            r &= 255;
            sd[j] = r;
            
            x = result[j];
            y = 0x09;
            r = 0;
            while (x != 0) 
            {
              if ((x & 1) != 0)
                 r = r ^ y;
              t = y & 0x80;
              y = y << 1;
              if (t != 0)
                 y = y ^ 0x1b;
              x = x >> 1; 
            }
            r &= 255;
            s9[j] = r;
          }
          for (int j = 0; j < 4; j++)
          {
            result[4 * j] = se[4 * j] ^ sb[4 * j + 1] ^ sd[4 * j + 2] ^ s9[4 * j + 3];
            result[4 * j + 1] = s9[4 * j] ^ se[4 * j + 1] ^ sb[4 * j + 2] ^ sd[4 * j + 3];
            result[4 * j + 2] = sd[4 * j] ^ s9[4 * j + 1] ^ se[4 * j + 2] ^ sb[4 * j + 3];
            result[4 * j + 3] = sb[4 * j] ^ sd[4 * j + 1] ^ s9[4 * j + 2] ^ se[4 * j + 3];
          }
        }
      }
    }
    memcpy(finalResult + startIndex, result, 16);
  }
  while (dataLeft > 0);
  return new AESData(finalResult, dataLength);
}

void AES::expandKey(const unsigned char key[], unsigned char expandedKey[], int expandedKeySize, int round)
{
  for (int i = 0; i < AES_DATA; i++)
    expandedKey[i] = key[i];

  unsigned char result[4] = {0};
  for (int i = 0; i <= round; i++)
  {
    if (i > 0)
    {
      for (int j = 0; j < 4; j++)
        expandedKey[i * AES_DATA + j] = expandedKey[(i - 1) * AES_DATA + j] ^ result[j];
      for (int j = 4; j < AES_DATA; j++)
        expandedKey[i * AES_DATA + j] = expandedKey[i * AES_DATA + j - 4] ^ expandedKey[(i - 1) * AES_DATA + j];
    }
    if (i < round)
      g(expandedKey, result, i); 
  }
}

void AES::g(const unsigned char key[], unsigned char result[], int loop)
{
  for (int i = 0; i < 3; i++)
    result[i] = key[loop * AES_DATA + 12 + i + 1];
  result[3] = key[loop * AES_DATA + 12];
  for (int i = 0; i < 4; i++)
  {
    int data = result[i];
    int column = data & 15;
    data >>= 4;
    int row = data & 15;
    result[i] = sbox[row][column];
  }
  result[0] ^= rcon[loop + 1];
}